{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-_,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"code-examples/","title":"Code examples","text":"add_numbers.py<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre>"},{"location":"content-tabs/","title":"Content tabs","text":""},{"location":"content-tabs/#content-tabs","title":"Content Tabs","text":"<p>This is some examples of content tabs.</p>"},{"location":"content-tabs/#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered list <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"content-tabs/#code-blocks-in-content-tabs","title":"Code Blocks in Content Tabs","text":"PythonJavaScript <pre><code>def main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>There are some explanation about the codes above.</p> <pre><code>function main() {\n    console.log(\"Hello world!\");\n}\n\nmain();\n</code></pre>"},{"location":"content-tabs/#admonitions-aka-callouts","title":"Admonitions (aka Callouts)","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Collapsible callout:</p> Collapsible callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>more examples of admonitions check official references.</p> <p>equations:</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"diagram-examples/","title":"Diagram Examples","text":""},{"location":"diagram-examples/#flowcharts","title":"Flowcharts","text":"diagram-examples.md<pre><code># Diagram Examples\n## Flowcharts\n```mermaid\ngraph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre>"},{"location":"diagram-examples/#sequence-diagrams","title":"Sequence Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"},{"location":"readme/","title":"Home","text":"<p>This is Jianyu's personal website. This static site is built with Material for Docs. A quick tutorial can be checked on james-willett's blog.</p> <p>My master studies was about using computational chemistry method (DFT and MD) to understand and describe gelation behavior. After graduation, I joined in Origin Quantum company as a quantum algorithm developer, where my research interest is about optimization and application of variational quantum algorithm. </p> <p>In this website I put some of notes and code about quantum chemistry and quantum computing I'm interested in. (I used to put it in my personal blog in Chinese, now I translate and organize them on Github pages.) This website is still under construction, I will keep it up to date as much as I can. </p> <p>Some code might seem basic and just in a few lines, but they provide some insights before starting to do new projects . I consider these code snippets as a verified toolbox, where all the scripts has been validated through prior project implementations. (LLM can generate code but it can never replace my working experience gained by debugging trauma )</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/content-tabs/","title":"Content tabs","text":""},{"location":"blog/content-tabs/#content-tabs","title":"Content Tabs","text":"<p>This is some examples of content tabs.</p> <p>Material for MkDocs is the ultimate framework for creating stunning, interactive documentation sites. In this tutorial, we\u2019ll be creating a new documentation portal completely from scratch, and then hosting that on the web for free using GitHub pages.</p> <p>Along the way, you'll learn just a handful of the awesome features that Material for MkDocs comes bundled with, such as:</p> <ul> <li>Setting a dynamic colour scheme</li> <li>Adding a splash of personality with emojis, icons and logos to make your content visually appealing</li> <li>How to create custom code blocks that adjust based on the programming language specified</li> <li>How to better organise your documentation using content tabs</li> <li>How to empathize parts of your content using admonitions - also known as callouts</li> <li>And how to bring your ideas to life with statically rendered diagrams directly in your docs</li> </ul> Tip <p>This is an in-depth tutorial. If this is your first time using Material for MkDocs then you're probably best to just follow it all through from the beginning.</p>"},{"location":"blog/content-tabs/#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered list <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"blog/content-tabs/#code-blocks-in-content-tabs","title":"Code Blocks in Content Tabs","text":"PythonJavaScript <pre><code>def main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>There are some explanation about the codes above.</p> <pre><code>function main() {\n    console.log(\"Hello world!\");\n}\n\nmain();\n</code></pre>"},{"location":"blog/content-tabs/#admonitions-aka-callouts","title":"Admonitions (aka Callouts)","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Collapsible callout:</p> Collapsible callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>more examples of admonitions check official references.</p> <p>equations:</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"blog/diagram-examples/","title":"Diagram Examples","text":""},{"location":"blog/diagram-examples/#flowcharts","title":"Flowcharts","text":"diagram-examples.md<pre><code># Diagram Examples\n## Flowcharts\n```mermaid\ngraph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre>"},{"location":"blog/diagram-examples/#sequence-diagrams","title":"Sequence Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"},{"location":"computational-chemistry/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"computational-chemistry/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project. </li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"computational-chemistry/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <pre><code>from copy import deepcopy\n\nnew_ir = deepcopy(input_string)\n\nnew_ir = new_ir.split('\\n')  # \u5b57\u7b26\u4e32\u6309\u884c\u5206\u5272\u4e3a\u5217\u8868\n\nnew_ir.insert(1, f'QINIT {max(mapping.values()) + 1}')\n\nnew_ir.pop(2)  # \u5220\u9664\u7b2c3\u884c\n\nnew_ir = '\\n'.join(new_ir)  # \u5217\u8868\u6309\u884c\u8fde\u63a5\u4e3a\u5b57\u7b26\u4e32\n\nprint(new_ir)\n</code></pre>"},{"location":"computational-chemistry/HF-SCF/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"computational-chemistry/HF-SCF/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project. </li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"computational-chemistry/HF-SCF/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <pre><code>from copy import deepcopy\n\nnew_ir = deepcopy(input_string)\n\nnew_ir = new_ir.split('\\n')  # \u5b57\u7b26\u4e32\u6309\u884c\u5206\u5272\u4e3a\u5217\u8868\n\nnew_ir.insert(1, f'QINIT {max(mapping.values()) + 1}')\n\nnew_ir.pop(2)  # \u5220\u9664\u7b2c3\u884c\n\nnew_ir = '\\n'.join(new_ir)  # \u5217\u8868\u6309\u884c\u8fde\u63a5\u4e3a\u5b57\u7b26\u4e32\n\nprint(new_ir)\n</code></pre>"},{"location":"computational-chemistry/HF-SCF/code-examples/","title":"Code examples","text":"add_numbers.py<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre>"},{"location":"computational-chemistry/HF-SCF/content-tabs/","title":"Content tabs","text":""},{"location":"computational-chemistry/HF-SCF/content-tabs/#content-tabs","title":"Content Tabs","text":"<p>This is some examples of content tabs.</p>"},{"location":"computational-chemistry/HF-SCF/content-tabs/#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered list <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"computational-chemistry/HF-SCF/content-tabs/#code-blocks-in-content-tabs","title":"Code Blocks in Content Tabs","text":"PythonJavaScript <pre><code>def main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>There are some explanation about the codes above.</p> <pre><code>function main() {\n    console.log(\"Hello world!\");\n}\n\nmain();\n</code></pre>"},{"location":"computational-chemistry/HF-SCF/content-tabs/#admonitions-aka-callouts","title":"Admonitions (aka Callouts)","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Collapsible callout:</p> Collapsible callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>more examples of admonitions check official references.</p> <p>equations:</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"computational-chemistry/HF-SCF/diagram-examples/","title":"Diagram Examples","text":""},{"location":"computational-chemistry/HF-SCF/diagram-examples/#flowcharts","title":"Flowcharts","text":"diagram-examples.md<pre><code># Diagram Examples\n## Flowcharts\n```mermaid\ngraph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre>"},{"location":"computational-chemistry/HF-SCF/diagram-examples/#sequence-diagrams","title":"Sequence Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"},{"location":"computational-chemistry/machine-learning/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"computational-chemistry/machine-learning/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project. </li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"computational-chemistry/machine-learning/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <pre><code>from copy import deepcopy\n\nnew_ir = deepcopy(input_string)\n\nnew_ir = new_ir.split('\\n')  # \u5b57\u7b26\u4e32\u6309\u884c\u5206\u5272\u4e3a\u5217\u8868\n\nnew_ir.insert(1, f'QINIT {max(mapping.values()) + 1}')\n\nnew_ir.pop(2)  # \u5220\u9664\u7b2c3\u884c\n\nnew_ir = '\\n'.join(new_ir)  # \u5217\u8868\u6309\u884c\u8fde\u63a5\u4e3a\u5b57\u7b26\u4e32\n\nprint(new_ir)\n</code></pre>"},{"location":"computational-chemistry/machine-learning/svm/active/","title":"1.Extract features from smiles using RDKit","text":"<p>In this section, I demonstrate a piece of code that uses RDKit <sup>1</sup> toolkit to extract molecular descriptors from known active molecules (ligands) targeting a specific protein. These descriptors are then used to train a machine learning model (e.g., support vector machine) to predict the binding activity of a ligand. </p> <p>The descriptors used in this code are taken from the published paper: <sup>2</sup> <code>Quantum machine learning framework for virtual screening in drug discovery: a prospective quantum advantage</code> and the dataset used here is  LIT-PCBA dataset<sup>3</sup>, which is specifically designed for virtual screening and machine learning.</p>"},{"location":"computational-chemistry/machine-learning/svm/active/#descriptors-introduction","title":"Descriptors introduction","text":"<p>The chosen molecular descriptors(features) are generally classified into 5 classes:   </p> <ol> <li> <p>Atomic species: number and kind of atoms composing a molecule.   </p> </li> <li> <p>Structural properties: number of single and double bonds, presence of aromatic rings, etc.  </p> </li> <li> <p>Physical-chemical properties: molecular weight and lipophilicity  </p> </li> <li> <p>Basic electronic information: general reactivity, polarity and rough electron density.  </p> </li> <li> <p>Molecular complexity: the complexity of every atom environment in a molecule which depends on the molecular structure.   </p> </li> </ol> <p>The specific descriptors are presented as follow (from paper<sup>2</sup> in appendix B): </p>"},{"location":"computational-chemistry/machine-learning/svm/active/#code-demo","title":"Code Demo","text":"<p>In the dataset, both active and inactive molecules are given in SMILES format. Here we only take the active ones (active.smi) as example: </p> <pre><code># import packages\nimport pandas as pd\nfrom rdkit import Chem\nfrom rdkit.Chem import Mol\nfrom rdkit.Chem import Descriptors\nfrom rdkit.Chem.rdchem import BondType, BondStereo\nfrom rdkit.ML.Descriptors import MoleculeDescriptors\n\n# load 7167 molecules from SMILES file\nsuppl = Chem.SmilesMolSupplier('actives.smi')\n# molecule counts\nprint(len(suppl))\n</code></pre> <pre><code>7167\n</code></pre> <p>For practical purposes, the descriptors are not categorized into five classes but are instead grouped for ease of reference. </p> <pre><code># declare the descriptors keywords\nATOMIC_SPECIES = ['C','N','O','P','S','F','Cl','Br','I']\nBOND_TYPES = [BondType.SINGLE, BondType.DOUBLE, BondStereo.STEREOE]\nAROMATIC_PROP = ['num_aroma_atoms', 'AP']\nOTHER_PROP = ['NumHAcceptors', 'NumHDonors','NumHeteroatoms','NumRotatableBonds','NHOHCount','NOCount','MolWt', 'MolLogP']\nELEC_INFO = ['FpDensityMorgan1','FpDensityMorgan2','FpDensityMorgan3','MaxAbsPartialCharge','MinAbsPartialCharge','NumValenceElectrons']\nMOL_COMP = ['BalabanJ','BertzCT','Chi0','Chi0n','Chi0v','Chi1','Chi1n','Chi1v','Chi2n','Chi2v','Chi3n','Chi3v','Chi4n','Chi4v','HallKierAlpha','Ipc','Kappa1','Kappa2','Kappa3']\n\n# Pre-initialize descriptor calculator \nother_calc = MoleculeDescriptors.MolecularDescriptorCalculator(OTHER_PROP)\nelec_calc = MoleculeDescriptors.MolecularDescriptorCalculator(ELEC_INFO)\nmc_calc = MoleculeDescriptors.MolecularDescriptorCalculator(MOL_COMP)\n</code></pre> <pre><code>dataset=[]\nfor mol in suppl:\n    # atom features: 'C','N','O','P','S','F','Cl','Br','I'\n    mol_atom = [atoms.GetSymbol() for atoms in mol.GetAtoms()]\n    atom_count = [mol_atom.count(atom) for atom in ATOMIC_SPECIES]\n\n    # bond features: single, double, stereo\n    mol_bond = [bonds.GetBondType() for bonds in mol.GetBonds()]\n    mol_stereo = [bond.GetStereo() for bond in mol.GetBonds()]\n    mol_total = mol_bond + mol_stereo\n    bond_count = [mol_total.count(bond) for bond in BOND_TYPES]\n\n    # aromaticity feature: No. of aromatic atoms + aromatic proportion\n    num_aroma_atoms = len(list(mol.GetAromaticAtoms()))\n    AP = num_aroma_atoms / mol.GetNumHeavyAtoms()\n    aromatic = [num_aroma_atoms, AP]\n\n    # other properties\n    other_property = list(other_calc.CalcDescriptors(mol))\n    el_property = list(elec_calc.CalcDescriptors(mol))\n    mc_property = list(mc_calc.CalcDescriptors(mol))\n\n    # combine all the features\n    features = (atom_count + bond_count + aromatic + other_property + el_property + mc_property)\n    dataset.append(features)  # save the data in a 2d array\n\n# create dataframe\ncolumn_name = (ATOMIC_SPECIES + ['single', 'double', 'stereoE'] + AROMATIC_PROP + OTHER_PROP + ELEC_INFO + MOL_COMP)\ndf_actives = pd.DataFrame(data=dataset,columns = column_name)\ndf_actives\n</code></pre> C N O P S F Cl Br I single ... HallKierAlpha Ipc Kappa1 Kappa2 Kappa3 0 17 5 2 0 1 0 0 0 0 16 ... -1.93 1.175242e+06 16.533706 7.530765 3.546026 1 21 3 3 0 1 0 0 0 0 7 ... -3.32 4.534871e+06 18.062438 8.141321 3.841228 2 24 4 3 0 1 0 0 0 0 13 ... -3.39 1.794330e+07 21.827384 8.625014 4.750895 3 25 6 1 0 0 0 0 0 0 14 ... -3.32 4.101819e+07 20.575350 9.042240 4.338801 4 16 2 3 0 0 0 1 0 0 9 ... -2.79 1.331666e+05 14.160087 5.537123 2.313694 ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... 7162 11 5 2 0 1 0 0 1 0 8 ... -1.63 3.969946e+04 14.772349 6.213661 3.273688 7163 21 0 8 0 0 0 0 0 0 18 ... -3.65 2.084500e+06 20.093761 7.402287 3.572501 7164 14 0 3 0 0 0 0 0 0 11 ... -1.64 4.165319e+03 15.360000 9.576366 9.298416 7165 8 2 5 0 0 0 0 0 0 7 ... -2.02 1.862336e+03 11.057042 4.467681 2.989007 7166 22 1 5 0 0 0 0 0 0 14 ... -3.41 2.506479e+06 19.354312 8.083712 3.174880 <p>7167 rows \u00d7 47 columns</p> <pre><code># add labels for actives and save files\ndf_actives['label']= 1  # pandas will broadcast the value to all lines\ndf_actives.to_csv('actives.csv', index=False) # save index or not, True by default\n</code></pre> <p>There are 7167 molecules and 47 descriptors(features) in total. Before input all data to train and test a Support Vector Machine, we need to first refine these features. Specifically, we will employ feature reduction and feature selection methods to reduce the dimension of features while retaining the most significant data patterns. The resulting dimensionality reduction decreases computational complexity, removes noise and redundancy, ultimately improving accuracy and generalization of ML model. In the next step, I will employ Principle Component Analysis(PCA) for feature reduction and Analysis of Variance(ANOVA) for feature selection using scikit learn library. </p>"},{"location":"computational-chemistry/machine-learning/svm/active/#reference","title":"Reference","text":"<ol> <li> <p>RDKit: Open-source cheminformatics. https://www.rdkit.org.\u00a0\u21a9</p> </li> <li> <p>Mensa, S., Sahin, E., Tacchino, F., Kl Barkoutsos, P., &amp; Tavernelli, I. (2023). Quantum machine learning framework for virtual screening in drug discovery: a prospective quantum advantage. Machine Learning: Science and Technology, 4(1), 015023.\u00a0\u21a9\u21a9</p> </li> <li> <p>Tran-Nguyen, V. K., Jacquemard, C., &amp; Rognan, D. (2020). LIT-PCBA: an unbiased data set for machine learning and virtual screening. Journal of chemical information and modeling, 60(9), 4263-4273.\u00a0\u21a9</p> </li> </ol>"},{"location":"computational-chemistry/machine-learning/svm/svm/","title":"Theoretical background","text":"<p>This will be a file introducing the theoretical principle of support vector machine.</p> <p>SVM\u662f\u76d1\u7763\u5b66\u4e60(Supervised Learning) <sup>1</sup> \u4e2d\u7684\u4e00\u79cd\u7b97\u6cd5\uff0c\u4e3b\u8981\u7528\u4e8e\u6c42\u89e3\u5206\u7c7b\u95ee\u9898 <sup>2</sup>\u3002 \u5206\u7c7b\u95ee\u9898\u6700\u57fa\u672c\u7684\u60f3\u6cd5\u5c31\u662f\u57fa\u4e8e\u8bad\u7ec3\u96c6\u5728\u6837\u672c\u7a7a\u95f4\u4e2d\u627e\u5230\u4e00\u4e2a\u5212\u5206\u8d85\u5e73\u9762 <sup>3</sup> \uff0c\u5c06\u4e0d\u540c\u7c7b\u522b\u7684\u6837\u672c\u5206\u5f00\u3002\u4f46\u80fd\u5c06\u8bad\u7ec3\u6837\u672c\u5206\u5f00\u7684\u5212\u5206\u8d85\u5e73\u9762\u53ef\u80fd\u6709\u5f88\u591a\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u5b58\u5728\u591a\u4e2a\u5212\u5206\u8d85\u5e73\u9762\u5c06\u4e24\u7c7b\u8bad\u7ec3\u6837\u672c\u5206\u5f00\uff0c\u5e94\u8be5\u9009\u54ea\u4e00\u6761\u5462\uff1f\u5b9e\u9645\u4e0a\uff0c\u6211\u4eec\u5e94\u9009\u62e9\u201c\u6b63\u4e2d\u95f4\u201d\u7684\u9ec4\u8272\u7ebf, \u5bf9\u5c40\u90e8\u6270\u52a8\u5bb9\u5fcd\u6027\u597d, \u9c81\u68d2\u6027(robust)\u9ad8, \u5bf9\u672a\u89c1\u793a\u4f8b\u7684\u6cdb\u5316\u80fd\u529b\u6700\u5f3a\u3002</p> <p></p> <p>\u7528\u6570\u5b66\u8bed\u8a00\u6765\u8bb2\uff0c\u5c31\u662f\u7ed9\u5b9a\u8bad\u7ec3\u6837\u672c\u96c6 \\(\\(D=\\{(x_1^a, x_1^b), (x_2^a, x_2^b), (x_3^a, x_3^b),\u2026\u2026(x_m^a, x_m^b)\\}, y_i \\in \\{-1,+1\\}\\)\\) , </p> <p>\u4f7f\u5f97\u4e24\u7c7b\u6837\u672c\u4e2d**\u8ddd\u79bb\u5b83\u6700\u8fd1\u7684\u6837\u672c\u70b9\u8ddd\u79bb\u6700\u5927**\u3002</p>"},{"location":"computational-chemistry/machine-learning/svm/svm/#reference","title":"Reference","text":"<ol> <li> <p>\u5728\u76d1\u7763\u5b66\u4e60\u4e2d\u8bad\u7ec3\u6570\u636e\u65e2\u6709 \u7279\u5f81(feature) \u53c8\u6709 \u6807\u7b7e(label) \uff0c\u901a\u8fc7\u8bad\u7ec3\uff0c\u8ba9\u673a\u5668\u53ef\u4ee5\u81ea\u5df1\u627e\u5230\u7279\u5f81\u548c\u6807\u7b7e\u4e4b\u95f4\u7684\u8054\u7cfb\uff0c\u5728\u9762\u5bf9\u53ea\u6709\u7279\u5f81\u6ca1\u6709\u6807\u7b7e\u7684\u6570\u636e\u65f6\uff0c\u53ef\u4ee5\u5224\u65ad\u51fa\u6807\u7b7e\u3002\u00a0\u21a9</p> </li> <li> <p>\u5206\u7c7b(classification)\u95ee\u9898\u6307\u7684\u662f\u8f93\u51fa\u7684\u6570\u636e\u7c7b\u578b\u662f\u79bb\u6563\u6570\u636e\uff0c\u56de\u5f52\uff08regression\uff09\u95ee\u9898\u6307\u7684\u662f\u8f93\u51fa\u7684\u662f\u8fde\u7eed\u6570\u636e\u7c7b\u578b\u3002\u00a0\u21a9</p> </li> <li> <p>\u51c6\u786e\u5730\u8bb2\uff0c\u201c\u4e00\u6761\u7ebf\u6216\u8005\u5e73\u9762\u201d\u88ab\u79f0\u4f5c\u8d85\u5e73\u9762\uff08hyperplane\uff09\u3002\u8d85\u5e73\u9762\u662f\u6307n\u7ef4\u7ebf\u6027\u7a7a\u95f4\u4e2d\u7ef4\u5ea6\u4e3an-1\u7684\u5b50\u7a7a\u95f4\u3002\u5b83\u53ef\u4ee5\u628a\u7ebf\u6027\u7a7a\u95f4\u5206\u5272\u6210\u4e0d\u76f8\u4ea4\u7684\u4e24\u90e8\u5206\u3002\u6bd4\u5982\u4e8c\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u4e00\u6761\u76f4\u7ebf\u662f\u4e00\u7ef4\u7684\uff0c\u5b83\u628a\u5e73\u9762\u5206\u6210\u4e86\u4e24\u5757\uff1b\u4e09\u7ef4\u7a7a\u95f4\u4e2d\uff0c\u4e00 \u4e2a\u5e73\u9762\u662f\u4e8c\u7ef4\u7684\uff0c\u5b83\u628a\u7a7a\u95f4\u5206\u6210\u4e86\u4e24\u5757\u3002  \u56fe\u6e90\uff1aHardin, D., Guyon, I., &amp; Aliferis, C. F. (2011). A Gentle introduction to support vector machines in biomedicine.\u00a0\u21a9</p> </li> </ol>"},{"location":"computational-chemistry/photochemistry/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"computational-chemistry/photochemistry/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project. </li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"computational-chemistry/photochemistry/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <pre><code>from copy import deepcopy\n\nnew_ir = deepcopy(input_string)\n\nnew_ir = new_ir.split('\\n')  # \u5b57\u7b26\u4e32\u6309\u884c\u5206\u5272\u4e3a\u5217\u8868\n\nnew_ir.insert(1, f'QINIT {max(mapping.values()) + 1}')\n\nnew_ir.pop(2)  # \u5220\u9664\u7b2c3\u884c\n\nnew_ir = '\\n'.join(new_ir)  # \u5217\u8868\u6309\u884c\u8fde\u63a5\u4e3a\u5b57\u7b26\u4e32\n\nprint(new_ir)\n</code></pre>"},{"location":"quantum-computing/","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"quantum-computing/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project. </li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"quantum-computing/#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre> <pre><code>from copy import deepcopy\n\nnew_ir = deepcopy(input_string)\n\nnew_ir = new_ir.split('\\n')  # \u5b57\u7b26\u4e32\u6309\u884c\u5206\u5272\u4e3a\u5217\u8868\n\nnew_ir.insert(1, f'QINIT {max(mapping.values()) + 1}')\n\nnew_ir.pop(2)  # \u5220\u9664\u7b2c3\u884c\n\nnew_ir = '\\n'.join(new_ir)  # \u5217\u8868\u6309\u884c\u8fde\u63a5\u4e3a\u5b57\u7b26\u4e32\n\nprint(new_ir)\n</code></pre>"},{"location":"quantum-computing/code-examples/","title":"Variational Quantum Eigensolver","text":"add_numbers.py<pre><code># Function to add two numbers\ndef add_two_numbers(num1, num2):\n    return num1 + num2\n\n# Example usage\nresult = add_two_numbers(5, 3)\nprint('The sum is:', result)\n</code></pre>"},{"location":"quantum-computing/content-tabs/","title":"Quantum approximate optimization algorithm","text":""},{"location":"quantum-computing/content-tabs/#content-tabs","title":"Content Tabs","text":"<p>This is some examples of content tabs.</p>"},{"location":"quantum-computing/content-tabs/#generic-content","title":"Generic Content","text":"Plain textUnordered listOrdered list <p>This is some plain text</p> <ul> <li>First item</li> <li>Second item</li> <li>Third item</li> </ul> <ol> <li>First item</li> <li>Second item</li> <li>Third item</li> </ol>"},{"location":"quantum-computing/content-tabs/#code-blocks-in-content-tabs","title":"Code Blocks in Content Tabs","text":"PythonJavaScript <pre><code>def main():\n    print(\"Hello world!\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>There are some explanation about the codes above.</p> <pre><code>function main() {\n    console.log(\"Hello world!\");\n}\n\nmain();\n</code></pre>"},{"location":"quantum-computing/content-tabs/#admonitions-aka-callouts","title":"Admonitions (aka Callouts)","text":"<p>Note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Warning</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Tip</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Question</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Collapsible callout:</p> Collapsible callout <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>more examples of admonitions check official references.</p> <p>equations:</p> \\[ \\cos x=\\sum_{k=0}^{\\infty}\\frac{(-1)^k}{(2k)!}x^{2k} \\]"},{"location":"quantum-computing/diagram-examples/","title":"Diagram Examples","text":""},{"location":"quantum-computing/diagram-examples/#flowcharts","title":"Flowcharts","text":"diagram-examples.md<pre><code># Diagram Examples\n## Flowcharts\n```mermaid\ngraph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Failure?};\n  B --&gt;|Yes| C[Investigate...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Success!];</code></pre>"},{"location":"quantum-computing/diagram-examples/#sequence-diagrams","title":"Sequence Diagrams","text":"<pre><code>sequenceDiagram\n  autonumber\n  Server-&gt;&gt;Terminal: Send request\n  loop Health\n      Terminal-&gt;&gt;Terminal: Check for health\n  end\n  Note right of Terminal: System online\n  Terminal--&gt;&gt;Server: Everything is OK\n  Terminal-&gt;&gt;Database: Request customer data\n  Database--&gt;&gt;Terminal: Customer data</code></pre>"},{"location":"scripts/complexity_pic/","title":"plot complexity figure","text":"<p>This is python script for drawing the time complexity of different computational chemistry method using package matplotlib.</p> <pre><code>import numpy as np\n# %matplotlib inline\nimport matplotlib.pyplot as plt\nfrom scipy.special import factorial\n# # # setting support for Chinese font\n# plt.rcParams['font.sans-serif'] = ['SimHei', 'Arial Unicode MS', 'Microsoft YaHei', 'DejaVu Sans']  \n# plt.rcParams['axes.unicode_minus'] = False  # solve minus sign display probelm\nplt.rcParams['font.family'] = 'serif'\nplt.rcParams['font.serif'] = ['Times New Roman']\n</code></pre> <pre><code># define function for different complexity \ndef dft_complexity(n):\n    return n**3\n\ndef mp2_complexity(n):\n    return n**5\n\ndef cisd_complexity(n):\n    return n**6\n\ndef ccsd_t_complexity(n):\n    return n**7\n\ndef fci_complexity(n):\n    return factorial(n)\n</code></pre> <pre><code># create datapoint \nn = np.linspace(1, 15, 100)  \ndft_vals = dft_complexity(n)\nmp2_vals = mp2_complexity(n)\ncisd_vals = cisd_complexity(n)\nccsd_t_vals = ccsd_t_complexity(n)\nfci_vals = fci_complexity(n)\n</code></pre> <pre><code># plot the figure canvas\nplt.figure(figsize=(12, 8), dpi=100)\n\n# plot with logarithmic scaling on the y-axis\nplt.semilogy(n, dft_vals, 'b-', linewidth=2.5, label=r'$DFT (O(N^3))$')\nplt.semilogy(n, mp2_vals, 'g--', linewidth=2.5, label=r'$MP2 (O(N^5))$')\nplt.semilogy(n, cisd_vals, 'r-.', linewidth=2.5, label=r'$CISD (O(N^6))$')\nplt.semilogy(n, ccsd_t_vals, 'm:', linewidth=2.5, label=r'$CCSD(T) (O(N^7))$')\nplt.semilogy(n, fci_vals, 'k-', linewidth=3, label=r'$FCI (O(N!))$')\n\n\n# # add special mark point\n# methods = [('DFT', 8, dft_complexity(8)), \n#            ('MP2', 6, mp2_complexity(6)),\n#            ('CISD', 5, cisd_complexity(5)),\n#            ('CCSD(T)', 4, ccsd_t_complexity(4)),\n#            ('FCI', 5, fci_complexity(5))]\n\n# for name, pos, val in methods:\n#     plt.plot(pos, val, 'bo', markersize=8)\n#     plt.annotate(name, \n#                 xy=(pos, val),\n#                 xytext=(10, 15 if name != 'FCI' else -30),\n#                 textcoords='offset points',\n#                 arrowprops=dict(arrowstyle=\"-&gt;\", color='red'),\n#                 fontsize=12,\n#                 weight='bold')\n\nplt.title('Complexity Comparison between different computational chemistry methods', fontsize=20, pad=20)\nplt.xlabel('Number of basis sets (N)', fontsize=14)\nplt.ylabel('Time Complexity (logarithmic)', fontsize=14)\nplt.grid(True, which=\"both\", ls=\"--\", alpha=0.3)\nplt.legend(loc='upper left', fontsize=12)\n\n# set axis range\nplt.xlim(1, 15)\nplt.ylim(1, 10**10)\n\n# add complexity text\nplt.text(12.6, 10**9, r'FCI: $O(N!)$', fontsize=18, color='k')\nplt.text(12.5, 10**7.25, r'CCSD(T): $O(N^7)$', fontsize=18, color='m')\nplt.text(12.5, 10**6, r'CISD: $O(N^6)$', fontsize=18, color='r')\nplt.text(12.5, 10**5, r'MP2: $O(N^5)$', fontsize=18, color='g')\nplt.text(12.5, 10**2.9, r'DFT: $O(N^3)$', fontsize=18, color='b')\n\n# add frame line \nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_linewidth(1.5)\nplt.gca().spines['bottom'].set_linewidth(1.5)\n\nplt.tight_layout()\nplt.show()\n</code></pre> <p> \u200b    </p>"},{"location":"scripts/mole_visual_demo/","title":"Molecule visualization in 3D","text":"<p>In this page, I managed to display some 3Dmol instance using a third-party JavaScript library 3Dmol.js , this is an excellent library for online molecular visualization on webpage. Here I will show some cases of  embedding proteins or molecules via setting 3Dmol parameters within HTML tags. For practical embedding 3Dmol in your code, check the tutorial  Using 3Dmol within your code.</p> <p>Here is 2POR protein displayed. After configuration of the class as <code>viewer_3Dmol js</code> in <code>div</code>, and the parameter <code>data-pdb</code> as <code>2POR</code>, 3dmol.js will download the corresponding PDB file via an HTTP request from RCSB PDB API\uff08In this case, https://files.rcsb.org/download/2POR.pdb ), parse the file and render the final protein on the canvas.  More settings on display style please check  embedding a 3Dmol Viewer.</p> <p>Next example is to display a small molecule, the keywords are the same as the above one but replacing the parameter <code>data-pdb</code> as <code>data-cid</code>. The underlying pinciple is the same but with different database and API. Given the Compound ID, 3dmol.js download the SDF file via an HTTP request from PubChem CID API\uff08<code>https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/5280343/record/SDF?record_type=3d</code> )</p> <p>Apart from displaying remote molecule files, local molecular data file can also be parsed and rendered automatically after loading local file. At present 3dmol support pdb, sdf, xyz, mol2 and cube formats. The following is an example. Parameter <code>data-href</code> and <code>data-type</code> need to be specified in <code>div</code>. </p> <p>By using  3dmol API to display molecules,  there are various functions can be configured to interact with the viewer, such as zoom  in/out, adding residue labels,  bond style, adding surfaces... see the official documentation in details: <code>https://3dmol.org/doc/AmbientOcclusionStyle.html</code> ) Here is an example showing the molecular docking result between qurecetin and protein 1R42.</p>"},{"location":"scripts/mole_visual_demo/#display-pdb-proteins-from-remote-database","title":"Display PDB proteins from remote database","text":""},{"location":"scripts/mole_visual_demo/#display-sdf-molecules-from-remote-database","title":"Display SDF molecules from remote database","text":""},{"location":"scripts/mole_visual_demo/#display-pdbsdf-molecules-from-local-database","title":"Display PDB/SDF molecules from local database","text":""},{"location":"scripts/mole_visual_demo/#using-rich-api-to-create-load-and-style-the-3dmol-instance","title":"Using rich API  to create, load and style the 3Dmol instance","text":""},{"location":"scripts/request_file/","title":"Request SDF files in batch","text":"<p>This code download SDF files for thousands of molecules in batch when provided SMILES.  The code background is: Frontend colleagues need molecular files with geometry information stored in their database. They used JavaScript library 3Dmol.js to visualize 3D molecular structrues on web application when provided sdf or pdf format files. </p> <pre><code>import requests,os\nimport numpy as np\nfrom pathlib import Path\nimport zipfile\n\ndef download_sdf_files(smiles,path):\n    # request data from pubchem\n    # url_2d = f\"https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/{smiles}/SDF\"\n\u200b    url_3d = f\"https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/smiles/{smiles}/SDF?record_type=3d\"\n\u200b    response = requests.get(url_3d)\n\u200b    \n    # If the requests succeed, obtain the content\n\u200b    if response.status_code == 200:\n\u200b        sdf_content = response.content\n\u200b        \n        # save 3D SDF files\n\u200b        with open(path/f'3d_{smiles}.sdf', 'wb') as f:\n\u200b            f.write(sdf_content)\n\u200b        \n\u200b        print(\"SDF files downloaded successfully.\")\n\u200b    else:\n\u200b        print(f\"Failed to download SDF files. Status code: {response.status_code}\")\n\n\nif __name__==\"__main__\":\n\n\u200b    dirpath = r'C:\\Users\\YOUR\\DESTINATION\\DIRECTORY\\FOLDER'\n\u200b    if os.getcwd() != dirpath:\n\u200b        os.chdir(dirpath)\n\u200b    output_head = Path.cwd()/'files'\n\u200b    if not os.path.exists(output_head):\n\u200b        os.mkdir(output_head)\n\u200b    \n\u200b    \n    # ex1\uff1agiven single smiles, download the 3D SDF file\n\u200b    smiles = \"C1=CC=C(C=C1)C=O\"\n\u200b    download_sdf_files(smiles,output_head)\n\u200b    \n    # ex2\uff1adownload 3D SDF file in SMILES txt file\n\u200b    mols = np.loadtxt(Path.cwd()/'SMILES.txt',dtype=str)\n\u200b    for mol in mols:\n\u200b        download_sdf_files(mol,output_head)\n\n    # compress files into one file:files.zip\n\u200b    with zipfile.ZipFile(Path.cwd()/'files.zip', 'w', zipfile.ZIP_DEFLATED) as myzip:\n\u200b        print(os.listdir(output_head))\n\u200b        for file in os.listdir(output_head):\n\u200b            myzip.write(Path('./files')/file) # Relative path\n</code></pre>"},{"location":"blog/archive/2025/","title":"2025","text":""},{"location":"blog/category/quantum-computing/","title":"Quantum Computing","text":""},{"location":"blog/category/computational-chemistry/","title":"Computational Chemistry","text":""}]}